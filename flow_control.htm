<!DOCTYPE HTML>
<html>
<head>
	<title>Clojure Bridge - Joe Wright</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=1274, user-scalable=no">
	<link rel="stylesheet" href="style.css">	
	<link href='http://fonts.googleapis.com/css?family=Rambla' rel='stylesheet' type='text/css'>
	<link href='http://fonts.googleapis.com/css?family=Inconsolata' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="highlighter/default.css">

	<style>
	    body {font-family: 'Rambla', sans-serif; text-align: center;}


      h1,h2,h3,h4,strong { color: rgba(255, 92, 0, 0.59); }
      h1 { font-size: 3em; padding-bottom: 1em; } 
      h2 { font-size: 2em; margin-top: 0; } 
      h3 { font-size: 1em; padding-top: 4em; } 
      h4 { font-size: 1em; margin: 0 0 1em 0;} 

      ol, ul, li { text-align: left; font-size: 0.8em; }
      .mono p { text-align: center; font-family: 'Inconsolata'; font-size: 1em; line-height: 2em; }
      .mono br { padding-bottom: 1em;}
      .heading_with_text p { font-size: 1.3em; }
      .session { margin-top: 1.5em; }
      pre { text-align: left; font-size: 0.6em; }

      table { 
        margin: 0 auto; margin-top: 2em;
        border-collapse: collapse;
        border-collapse-style: solid;
        border-color: black; 
        border-spacing: 0.1em;
        border-collapse: separate; }
      table tr td { padding: 0.4em; }
      table tr th:nth-child(3) { background-color: white; }
      table tr td:nth-child(3) { background-color: white; }
      table tr.odd { background-color: lightgrey; }
      table tr th { background-color: rgba(255, 92, 0, 0.59); margin-right: 0.2em; color: white; padding: 0.2em; }
	</style>

</head>
<body class="list">
	<header class="caption"><h1>Flow Control</h1><p>Joe Wright</p></header>
	
  <div class="slide" id="a-0"><div class="heading"><section><header>
      <h1>Flow Control</h1><p style="text-align: left">Joe Wright<span style="float: right">@joe_ jag</span></p></header></section></div></div>

  <div class="slide" id="a-1"><div><section><header>
      <h2>Schedule</h4>
      <div class="mono">
      <p>(if)
      <br/>Boolean logic
      <br/>(let)
      </p>
      </div>
   </header></section></div></div>

  <div class="slide" id="a-3"><div class="heading_with_text"><section><header>
      <h2>(if)</h2>
      <pre><code class="clojure">
(if conditional-expression
  expression-to-evaluate-when-true
  expression-to-evaluate-when-false)
        </code></pre>
   </header></section></div></div>

  <div class="slide" id="a-4"><div class="heading_with_text"><section><header>
      <h2>(if)</h2>
      <pre><code class="clojure">
(if conditional-expression
  expression-to-evaluate-when-true
  expression-to-evaluate-when-false)
        </code></pre>
      <pre><code class="clojure">
(if (valid? data)
  (save! data)
  (error "Your data was invalid"))
</code></pre>
   </header></section></div></div>

  <div class="slide" id="a-5"><div class="heading_with_text"><section><header>
      <h2>More (if)</h2>
      <pre><code class="clojure">
(if conditional-expression
  expression-to-evaluate-when-true
  expression-to-evaluate-when-false)
        </code></pre>
      <pre><code class="clojure">
(if (> 3 1)
  "3 is greater than 1"
  "3 is not greater than 1")
  ;=> "3 is greater than 1"
        </code></pre>
   </header></section></div></div>

  <div class="slide" id="a-6"><div class="heading_with_text"><section><header>
      <h2>More (if)</h2>
      <pre><code class="clojure">
(if conditional-expression
  expression-to-evaluate-when-true
  expression-to-evaluate-when-false)
        </code></pre>
      <pre><code class="clojure">
(if (> 1 3)
  "1 is greater than 3"
  "1 is not greater than 3")
  ;=> "1 is not greater than 3"
    </code></pre>
   </header></section></div></div>

  <div class="slide" id="a-7"><div class="heading_with_text"><section><header>
      <h2>falsey</h2>
      <p>Clojure considers the values nil and false to be false and everything else to be true
      <pre><code class="clojure">
(if nil
  "nil is considered true"
  "nil is not considered true")
  ;=> "nil is not considered true"
        </code></pre>
   </header></section></div></div>


<div class="slide" id="a-8"><div class="heading_with_text"><section><header>
      <h2>More falsey</h2>
      <p>Clojure considers the values nil and false to be false and everything else to be true
      <pre><code class="clojure">
(if "anything other than nil or false is true"
  "A string is considered true"
  "A string is not considered true")
  ;=> "A string is considered true"
    </code></pre>
   </header></section></div></div>



  <div class="slide" id="a-9"><div class="heading_with_text"><section><header>
      <h2>falsey with collections</h2>
      <p>Clojure considers the values nil and false to be false and everything else to be true
      <pre><code class="clojure">
(if (get {:a 1} :b)
  "expressions which eval to nil are true"
  "expressions which eval to nil are not true")
  ;=> "expressions which evaluate to nil are not true"
        </code></pre>
   </header></section></div></div>

   <div class="slide cover" id="a-10"><div class="heading"><section><header><h2 style="color: white; padding-top: 3em">Exercise!</h2><img src="exercise3.gif" style="background-color: white" alt=""></header></section></div></div>

  <div class="slide" id="a-11"><div class="heading_with_text"><section><header>
      <p>Write a function (format-name) that takes a map representing a user, with keys :first, :last, and possibly :middle. It should return their name as a string

      <pre><code class="clojure">
(format-name {:first "Margaret" :last "Atwood"})
;=> "Margaret Atwood"

(format-name {:first "Ursula" 
              :last "Le Guin" 
              :middle "K."})
;=> "Ursula K. Le Guin"
        </code></pre>
   </header></section></div></div>

  <div class="slide" id="a-12"><div class="heading"><section><header>
      <h2 class="session">Bonus Exercise!</h2> <p>Flexible name formatting</p>
   </header></section></div></div>

  <div class="slide" id="a-13"><div class="heading_with_text"><section><header>
      <p>Change format-name to take a second argument, order. If order equals :last, then the format should 
      be "Last, First Middle"; otherwise, it should be "First Middle Last."

      <pre><code class="clojure">
(format-name {:first "Ursula" 
              :last "Le Guin" 
              :middle "K."} :last)
;=> "Le Guin, Ursula K."
        </code></pre>
   </header></section></div></div>






  <div class="slide" id="b-1"><div class="heading_with_text"><section><header>
      <h2>Boolean logic</h2>
      <p>Boolean logic refers to combining and changing the results of predicates using (and), (or), and (not)</p>
   </header></section></div></div>
  <div class="slide" id="b-2"><div class="heading_with_text"><section><header>
      <h4>Table of truth</h4>

      <table>
        <thead><tr>
            <th>x</th>
            <th>y</th>
            <th></th>
            <th>(and x y)</th>
            <th>(or x y)</th>
            <th>(not x)</th>
            <th>(not y)</th>
        </tr></thead>
        <tbody>
          <tr>
            <td>false</td>
            <td>false</td>
            <td></td>
            <td>false</td>
            <td>false</td>
            <td>true</td>
            <td>true</td>
          </tr>
          <tr class="odd">
            <td>true</td>
            <td>false</td>
            <td></td>
            <td>false</td>
            <td>true</td>
            <td>false</td>
            <td>true</td>
          </tr>
          <tr>
            <td>true</td>
            <td>true</td>
            <td></td>
            <td>true</td>
            <td>true</td>
            <td>false</td>
            <td>false</td>
          </tr>
          <tr class="odd">
            <td>false</td>
            <td>true</td>
            <td></td>
            <td>false</td>
            <td>true</td>
            <td>true</td>
            <td>false</td>
          </tr>
        </tbody>
      </table>

   </header></section></div></div>

  <div class="slide" id="b-3"><div class="heading_with_text"><section><header>
 
      <h4>Combining boolean logic</h4>
      <p>(and), (or), and (not) can be combined. This can be hard to read</p>
      <pre><code class="clojure">
(defn leap-year?
  "Every four years, except years divisible by 100,
  but true for years divisible by 400."
  [year]
  (and (zero? (mod year 4))
     (or (zero? (mod year 400))
         (not (zero? (mod year 100))))))
</code></pre>
   </header></section></div></div>


  <div class="slide" id="c-1"><div class="heading_with_text"><section><header>
      <h2>(let)</h2>
      <p>When you are creating functions, you may want to assign names to values in order to reuse those values or make your code more readable
   </header></section></div></div>


  <div class="slide" id="c-2"><div class="heading_with_text"><section><header>
      <h4>(let) example</h4>
      <pre><code class="clojure">
(defn spread
  "Given a collection of numbers, return the 
   difference between the largest and smallest"
  [numbers]
  (let [largest  (reduce max numbers)
        smallest (reduce min numbers)]
    (- largest smallest)))

(spread [10 7 3 -3 8]) ;=> 13
</code></pre>
   </header></section></div></div>

  <div class="slide" id="c-3"><div class="heading_with_text"><section><header>
      <h4>without (let)</h4>
      <pre><code class="clojure">
(defn spread
  "Given a collection of numbers, return the 
   difference between the largest and smallest"
  [numbers]
  (- (reduce max numbers) (reduce min numbers)))



(spread [10 7 3 -3 8]) ;=> 13
</code></pre>
   </header></section></div></div>

  <div class="slide cover" id="c-4"><div class="heading"><section><header><h2 style="color: white; padding-top: 0em">Exercise!</h2><img src="exercise4.gif" style="background-color: white" alt=""></header></section></div></div>

  <div class="slide" id="c-5"><div class="heading_with_text"><section><header>
      <h2 class="session">Rewrite average</h2>
      <p>Go back to the average bill amounts function you created before and use let to make it easier to read.
   </header></section></div></div>

  <div class="slide" id="c-6"><div class="heading"><section><header>
      <h2 class="session">Bonus Exercise!</h2> <p>Ordinal numbers</p>
   </header></section></div></div>

  <div class="slide" id="c-7"><div class="heading_with_text"><section><header>
      <p>Given a number (positive integer), return the string representing the ordinal number</p>
      <pre><code class="clojure">
(ordinal 1)  ;=> "1st"
(ordinal 2)  ;=> "2nd"
(ordinal 3)  ;=> "3rd"
(ordinal 4)  ;=> "4th"
(ordinal 5)  ;=> "5th"
(ordinal 21) ;=> "21st"
(ordinal 22) ;=> "22nd"
        </code></pre>
   </header></section></div></div>

  <div class="slide" id="c-9"><div class="heading"><section><header>
      <h2 class="session">Bonus Exercise 2!</h2> 
      <p>Last digits are superceded when the last 2 digits are 11, 12, or 13 to be 'th'
   </header></section></div></div>

  <div class="slide" id="c-10"><div class="heading_with_text"><section><header>
      <p>More ordinal numbers</p>
      <pre><code class="clojure">
(ordinal 10) ;=> "10th"
(ordinal 11) ;=> "11th"
(ordinal 12) ;=> "12th"
(ordinal 13) ;=> "13th"
(ordinal 14) ;=> "14th"
        </code></pre>
   </header></section></div></div>


   <div class="slide cover" id="z"><div class="heading"><section><header><img src="goodbye.gif" style="background-color: white" alt=""></header></section></div></div>

	<script src="script.js"></script>	
  <script src="highlighter/highlight.pack.js"></script>
  <script>hljs.initHighlightingOnLoad();</script>
</body>
</html>
